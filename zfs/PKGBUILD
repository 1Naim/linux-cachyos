# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Jan Houben <jan@nexttrex.de>
# Contributor: Jesus Alvarez <jeezusjr at gmail dot com>
#
# This PKGBUILD was generated by the archzfs build scripts located at
#
# http://github.com/archzfs/archzfs
#
# ! WARNING !
#
# The archzfs packages are kernel modules, so these PKGBUILDS will only work with the kernel package they target. In this
# case, the archzfs-linux-lts packages will only work with the default linux-lts package! To have a single PKGBUILD target
# many kernels would make for a cluttered PKGBUILD!
#
# If you have a custom kernel, you will need to change things in the PKGBUILDS. If you would like to have AUR or archzfs repo
# packages for your favorite kernel package built using the archzfs build tools, submit a request in the Issue tracker on the
# archzfs github page.
#

### Selecting the CPU scheduler
# ATTENTION - one of seven predefined values should be selected!
# 'bmq' - select 'BitMap Queue CPU scheduler'
# 'pds' - select 'Priority and Deadline based Skip list multiple queue CPU scheduler'
# 'cacule' - select 'CacULE scheduler'
# 'cacule-rdb' - select 'CacULE-RDB scheduler'
# 'bore' - select 'Burst-Oriented Response Enhancer'
# 'tt' - select 'Task Type Scheduler by Hamad Marri'
# 'cfs' - select 'Completely Fair Scheduler'
_pkgcore=cachyos
# Clang LTO mode, only available with the "llvm" compiler - options are "no", "full" or "thin".
# "full: uses 1 thread for Linking, slow and uses more memory, theoretically with the highest performance gains."
# "thin: uses multiple threads, faster and uses less memory, may have a lower runtime performance than Full."
_use_llvm_lto=

if [ -n "$_use_llvm_lto" ]; then
  _linuxpostfix=${_pkgcore}-lto
  export LLVM=1 LLVM_IAS=1 CC=clang LD=lld
else
  _linuxpostfix=${_pkgcore}
fi

_linuxprefix=linux-${_linuxpostfix}
_kernver=5.17.4-1
pkgname="${_linuxprefix}-zfs"
pkgver=2.1.4
pkgrel=1
pkgdesc='Kernel modules for the Zettabyte File System.'
arch=('x86_64' 'x86_64_v3')
url="http://zfsonlinux.org/"
license=("CDDL")
depends=("$_linuxprefix" "kmod" "zfs-utils=${pkgver}")
makedepends=("$_linuxprefix-headers")
provides=("zfs=$pkgver")
#groups=("$_linuxprefix-extramodules")
install=zfs.install
source=("https://github.com/zfsonlinux/zfs/releases/download/zfs-${pkgver}/zfs-${pkgver}.tar.gz")
sha256sums=('3b52c0d493f806f638dca87dde809f53861cd318c1ebb0e60daeaa061cf1acf6')

build() {
  cd "zfs-${pkgver}"
  ./autogen.sh
  sed -i "s|\$(uname -r)|${_kernver}-${_linuxpostfix}|g" configure
  ./configure --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin --libdir=/usr/lib \
    --datadir=/usr/share --includedir=/usr/include --with-udevdir=/lib/udev \
    --libexecdir=/usr/lib/zfs-${pkgver} --with-config=kernel \
    --with-linux=/usr/lib/modules/${_kernver}-${_linuxpostfix}/build \
    --with-linux-obj=/usr/lib/modules/${_kernver}-${_linuxpostfix}/build
  make
}

package(){
  cd "zfs-${pkgver}"
  install -dm755 "$pkgdir/usr/lib/modules/${_kernver}-${_linuxpostfix}"
  install -m644 module/*/*.ko "$pkgdir/usr/lib/modules/${_kernver}-${_linuxpostfix}"
  find "$pkgdir" -name '*.ko' -exec zstd --rm -10 {} +
  sed -i -e "s/EXTRAMODULES='.*'/EXTRAMODULES='${_kernver}-${_linuxpostfix}'/" "$startdir/zfs.install"
}
